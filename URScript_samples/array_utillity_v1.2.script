# utility for making 2D arrays of nums or chars
# Phillip Grambo | Applcations Engineer | pgra@universal-robots.com
# requires PolyScope 5.15.0 or higher

# core principal: 
### although make_list() in urscript cannont make lists of lists, it can make lists of structs
### those structs can in turn contain a single instance of the make_list() function
# for now, just 2D nums and chars, not resizable

# to make it resizable: 
# 1) need a way to assign the capacity of rows and cols (should be straightforward)
# 2) need to port over many of the matrix and list functions

# generate a matrix
# example usage: a = make_matrix(2,3,0):
# a = [struct(row_instance=[0,0,0]),
#      struct(row_instance=[0,0,0])]
def make_matrix(rows, columns, init_values):
    # polyscope can only hand up to a 75x75 array, check for conditions
    if (rows>75):
        error_string = "in make_matrix(), provided number of rows is "+to_str(rows)+"which exceeds the max amount of 75"
        textmsg(error_string)
        popup(error_string, title="error in function, cannot continue", error = True, blocking = True)        
    end
    if (columns>75):
        error_string = "in make_matrix(), provided number of rows is "+to_str(columns)+"which exceeds the max amount of 75"
        textmsg(error_string)
        popup(error_string, title="error in function, cannot continue", error = True, blocking = True)        
    end
    # start with a row of the appropriate length
    local tmp_list=make_list(columns, init_values, columns+1)
    # make a struct with just the one entry
    local tmp_struct=struct(row_instance=tmp_list)
    # now make the full list
    local tmp_array=make_list(rows,tmp_struct, rows+1)

    # return the result
    return tmp_array
end

# need better ways to interact items in the data set, as the grid is non-standard
def get_matrix_size(array):
    local num_of_rows = size(array) #indexed at 1
    local num_of_cols = length(array[0][0]) #indexed at 1
    local ans = [num_of_rows, num_of_cols]
    return ans
end

# retieve an individual element of the grid
def get_matrix_element(array,r,c):
    local ans = array[r][0][c]  # dont ask
    return ans
end

# assign a value to a specific row and column of a matrix
# example usage
# a = [[1,2],[3,4]] == TRUE
# a = overwrite_matrix_element(a,0,1,9)
# a = [[1,9],[3,4]] == TRUE
def overwrite_matrix_element(array, row, col, value):
    local tmp_ans = array
    tmp_ans[row][0][col] = value
    return tmp_ans
end

# retieve an individual row of the matrix
def get_matrix_row(array, row):
    local row_length = get_matrix_size(array)[0] # row_length is indexed at 1
    # retireve first value to get var type
    local first_entry = get_matrix_element(array, row, 0)
    # make dummy list
    local tmp_list = make_list(row_length,first_entry, row_length+1)
    # write values in one at a time
    local i=0
    while i < row_length+1:
      tmp_list[i]=get_matrix_element(array, row, i)
      i=i+1
    end
    # return result
    return tmp_list
end

# assign a list value to a specific row of a matrix
# example usage
# (a = [[1,2],[3,4]]) == TRUE
# a = overwrite_matrix_row(a,0,[5,6])
# (a = [[5,6],[3,4]]) == TRUE
def overwrite_matrix_row(array, row, value):
    # check if length of value exceeds row length of array
    local value_length = length(value)
    local row_length = get_matrix_size(array)[1]
    if (value_length>row_length):
        error_string = "error in overwrite_matrix_row(): length of supplied list is "+to_str(value_length)+" which exceeds the array row length of "+to_str(row_length)
        textmsg(error_string)
        popup(error_string, title="error in function, cannot continue", error = True, blocking = True)
    end
    # set up answer, then overwrite elements one at a time
    local tmp_ans = array
    local i=0
    while i < value_length:
        tmp_ans=overwrite_matrix_element(tmp_ans, row, i, value[i])
        i=i+1      
    end
    # return result
    return tmp_ans
end


